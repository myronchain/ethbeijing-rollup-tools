/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IEscrow {
  export type L1StandardERC20Struct = {
    addr: string;
    name: string;
    symbol: string;
    decimals: BigNumberish;
  };

  export type L1StandardERC20StructOutput = [
    string,
    string,
    string,
    BigNumber
  ] & { addr: string; name: string; symbol: string; decimals: BigNumber };
}

export interface L2EscrowInterface extends utils.Interface {
  contractName: "L2Escrow";
  functions: {
    "finalizeERC20Deposit(address,address,uint256,(address,string,string,uint256),bytes)": FunctionFragment;
    "finalizeETHDeposit(address,address,uint256,bytes)": FunctionFragment;
    "init(address)": FunctionFragment;
    "l1Tokens(address)": FunctionFragment;
    "l2Tokens(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolve(string)": FunctionFragment;
    "resolveRemote(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawERC20(address,uint256,uint256,bytes)": FunctionFragment;
    "withdrawERC20To(address,address,uint256,uint256,bytes)": FunctionFragment;
    "withdrawETH(uint256,uint256,bytes)": FunctionFragment;
    "withdrawETHTo(address,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeERC20Deposit",
    values: [
      string,
      string,
      BigNumberish,
      IEscrow.L1StandardERC20Struct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeETHDeposit",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "l1Tokens", values: [string]): string;
  encodeFunctionData(functionFragment: "l2Tokens", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "resolveRemote",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20To",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHTo",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeERC20Deposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeETHDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHTo",
    data: BytesLike
  ): Result;

  events: {
    "ERC20DepositFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "ERC20WithdrawalInitiated(address,address,address,address,uint256,uint256,bytes)": EventFragment;
    "ETHDepositFinalized(address,address,uint256,bytes)": EventFragment;
    "ETHWithdrawalInitiated(address,address,uint256,uint256,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "L2StandardERC20Deployed(address,address,string,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20DepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20WithdrawalInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHDepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHWithdrawalInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L2StandardERC20Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ERC20DepositFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  {
    _l1token: string;
    _l2token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type ERC20DepositFinalizedEventFilter =
  TypedEventFilter<ERC20DepositFinalizedEvent>;

export type ERC20WithdrawalInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string],
  {
    _l1token: string;
    _l2token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _relayFee: BigNumber;
    _data: string;
  }
>;

export type ERC20WithdrawalInitiatedEventFilter =
  TypedEventFilter<ERC20WithdrawalInitiatedEvent>;

export type ETHDepositFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { _from: string; _to: string; _amount: BigNumber; _data: string }
>;

export type ETHDepositFinalizedEventFilter =
  TypedEventFilter<ETHDepositFinalizedEvent>;

export type ETHWithdrawalInitiatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  {
    _from: string;
    _to: string;
    _amount: BigNumber;
    _relayFee: BigNumber;
    _data: string;
  }
>;

export type ETHWithdrawalInitiatedEventFilter =
  TypedEventFilter<ETHWithdrawalInitiatedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type L2StandardERC20DeployedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  {
    _l1token: string;
    _l2token: string;
    _name: string;
    _symbol: string;
    _decimals: BigNumber;
  }
>;

export type L2StandardERC20DeployedEventFilter =
  TypedEventFilter<L2StandardERC20DeployedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface L2Escrow extends BaseContract {
  contractName: "L2Escrow";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    finalizeERC20Deposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _l1token: IEscrow.L1StandardERC20Struct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeETHDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      addressManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    l1Tokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    l2Tokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolve(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    resolveRemote(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _l2token: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20To(
      _l2token: string,
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETHTo(
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  finalizeERC20Deposit(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _l1token: IEscrow.L1StandardERC20Struct,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeETHDeposit(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    addressManager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  l1Tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  l2Tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolve(name: string, overrides?: CallOverrides): Promise<string>;

  resolveRemote(name: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _l2token: string,
    _amount: BigNumberish,
    _relayFee: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20To(
    _l2token: string,
    _to: string,
    _amount: BigNumberish,
    _relayFee: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    _amount: BigNumberish,
    _relayFee: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETHTo(
    _to: string,
    _amount: BigNumberish,
    _relayFee: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    finalizeERC20Deposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _l1token: IEscrow.L1StandardERC20Struct,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeETHDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    init(addressManager_: string, overrides?: CallOverrides): Promise<void>;

    l1Tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    l2Tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolve(name: string, overrides?: CallOverrides): Promise<string>;

    resolveRemote(name: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      _l2token: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20To(
      _l2token: string,
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETHTo(
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20DepositFinalized(address,address,address,address,uint256,bytes)"(
      _l1token?: string | null,
      _l2token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): ERC20DepositFinalizedEventFilter;
    ERC20DepositFinalized(
      _l1token?: string | null,
      _l2token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): ERC20DepositFinalizedEventFilter;

    "ERC20WithdrawalInitiated(address,address,address,address,uint256,uint256,bytes)"(
      _l1token?: string | null,
      _l2token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _relayFee?: null,
      _data?: null
    ): ERC20WithdrawalInitiatedEventFilter;
    ERC20WithdrawalInitiated(
      _l1token?: string | null,
      _l2token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _relayFee?: null,
      _data?: null
    ): ERC20WithdrawalInitiatedEventFilter;

    "ETHDepositFinalized(address,address,uint256,bytes)"(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _data?: null
    ): ETHDepositFinalizedEventFilter;
    ETHDepositFinalized(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _data?: null
    ): ETHDepositFinalizedEventFilter;

    "ETHWithdrawalInitiated(address,address,uint256,uint256,bytes)"(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _relayFee?: null,
      _data?: null
    ): ETHWithdrawalInitiatedEventFilter;
    ETHWithdrawalInitiated(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _relayFee?: null,
      _data?: null
    ): ETHWithdrawalInitiatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "L2StandardERC20Deployed(address,address,string,string,uint256)"(
      _l1token?: string | null,
      _l2token?: string | null,
      _name?: null,
      _symbol?: null,
      _decimals?: null
    ): L2StandardERC20DeployedEventFilter;
    L2StandardERC20Deployed(
      _l1token?: string | null,
      _l2token?: string | null,
      _name?: null,
      _symbol?: null,
      _decimals?: null
    ): L2StandardERC20DeployedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    finalizeERC20Deposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _l1token: IEscrow.L1StandardERC20Struct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeETHDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      addressManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    l1Tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    l2Tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolve(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolveRemote(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _l2token: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20To(
      _l2token: string,
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETHTo(
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finalizeERC20Deposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _l1token: IEscrow.L1StandardERC20Struct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeETHDeposit(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      addressManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    l1Tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2Tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveRemote(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _l2token: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20To(
      _l2token: string,
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETHTo(
      _to: string,
      _amount: BigNumberish,
      _relayFee: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
